
<div class="container">
  <video id="video" #video autoplay playsinline></video>
  <canvas id="canvas" #canvas></canvas>
  
  
  <br>
  <button id="cameraButton" mat-raised-button (click)="onClickCamera()">
    {{ cameraButtonLabel }}
  </button><br>
  <!-- <input matInput [(ngModel)]="name" placeholder="Your name" required><br> -->
  <!-- <button mat-raised-button (click)="onClickRegister()">
    {{ registerButtonLabel }}
  </button> -->
  <!-- {{ userMessage }} -->
</div>
@ViewChild('video') videoElm!: ElementRef;
  @ViewChild('canvas') canvasElm!: ElementRef;
  name!: string;
  captureData!: string;
  userMessage!: string;
  private isCameraActive = false;
  private cameraLabelActive = 'Take a photo';
  private cameraLabelInactive = 'Restart camera';
  cameraButtonLabel = this.cameraLabelActive;
  registerButtonLabel = 'Register this photo';

  readonly medias: MediaStreamConstraints = {
    audio: false,
    video: {
      facingMode: 'user',
    }
  };

ngOnInit(): void {
    this.startCamera();
  }
ngOnDestroy(): void {
  this.stopCamera();
}
private startCamera() {
  console.log('starting camera...');

  window.navigator.mediaDevices.getUserMedia(this.medias)
    .then(stream => {
      this.videoElm.nativeElement.srcObject = stream;
      this.isCameraActive = true;
    })
    .catch(error => {
      console.error(error);
      alert(error);
    });
}
onClickCamera() {
  if (this.isCameraActive) {
    this.captureData = this.draw();
    this.captureData = this.captureData.replace('data:image/png;base64,', '');
   console.log(this.captureData);

    this.stopCamera();

    this.cameraButtonLabel = this.cameraLabelInactive;
  } else {
    this.captureData = '';
    this.startCamera();

    this.cameraButtonLabel = this.cameraLabelActive;
  }
}
private draw() {
  const WIDTH = this.videoElm.nativeElement.clientWidth;
  const HEIGHT = this.videoElm.nativeElement.clientHeight;

  const ctx = this.canvasElm.nativeElement.getContext('2d') as CanvasRenderingContext2D;
  this.canvasElm.nativeElement.width  = WIDTH;
  this.canvasElm.nativeElement.height = HEIGHT;

  return this.canvasElm.nativeElement.toDataURL(
    ctx.drawImage(this.videoElm.nativeElement, 0, 0, WIDTH, HEIGHT)
  );
}

private stopCamera() {
  console.log('stopping camera...');

  this.videoElm.nativeElement.pause();
  if (this.videoElm.nativeElement.srcObject !== null) {
    const track = this.videoElm.nativeElement.srcObject.getTracks()[0] as MediaStreamTrack;
    track.stop();
  }

  this.isCameraActive = false;
}
// onClickRegister() {
//   this.registerPhoto();
// }
// private registerPhoto() {
//   if (!this.name) {
//     this.userMessage = 'Please fill name';
//   } else if (!this.captureData) {
//     this.userMessage = 'Please take photo';
//   } else {
//     this.notificationService.addPhoto(this.name, this.captureData).subscribe(res => {
//       console.log(res);
//       this.userMessage = 'Registration done.';
//     });
//   }
// }
// Convert base64 data to byte array
    const binaryString = atob(base64Data);
    const len = binaryString.length;
    const bytes = new Uint8Array(len);
    for (let i = 0; i < len; i++) {
      bytes[i] = binaryString.charCodeAt(i);
    }

    console.log(bytes);

<ngx-charts-line-chart
[view]="[900, 400]"
[scheme]="colorScheme"
[results]="chartData"
[xAxis]="showXAxis"
[yAxis]="showYAxis"
[legend]="showLegend"
[legendTitle]="'Appointments'"
[showXAxisLabel]="showXAxisLabel"
[showYAxisLabel]="showYAxisLabel"
[xAxisLabel]="'Month'"
[yAxisLabel]="'Number of Appointments'">

</ngx-charts-line-chart>

colorScheme = 'cool';
  showXAxis = true;
  showYAxis = true;
  showLegend = true;
  showXAxisLabel = true;
  showYAxisLabel = true;


  chartData = [
    {
      name: 'Appointment 2022',
      series: [
        {
          name: 'January',
          value: 90
        },
        {
          name: 'February',
          value: 5000
        },
        {
          name: 'March',
          value: 250
        },
        {
          name: 'April',
          value: 0
        },
        {
          name: 'May',
          value: 2000
        },
        {
          name: 'June',
          value: 1
        },
        {
          name: 'July',
          value: 1000
        },
        {
          name: 'August',
          value: 300
        },
        {
          name: 'September',
          value: 800
        },
        {
          name: 'October',
          value: 1800
        },
        {
          name: 'November',
          value: 150
        },
        {
          name: 'December',
          value: 200
        }
      ]
    },
    {
      name: 'Appointment 2023',
      series: [
        {
          name: 'January',
          value: 3000
        },
        {
          name: 'February',
          value: 7500
        },
        {
          name: 'March',
          value: 9500
        },
        {
          name: 'April',
          value: 6500
        },
        {
          name: 'May',
          value: 8500
        },
        {
          name: 'June',
          value: 0
        },
        {
          name: 'July',
          value: 0
        },
        {
          name: 'August',
          value: 0
        },
        {
          name: 'September',
          value: 0
        },
        {
          name: 'October',
          value: 0
        },
        {
          name: 'November',
          value: 0
        },
        {
          name: 'December',
          value: 0
        }
      ]
    }
    <div class="container" style="position: relative;top: 50px;">
    <button (click)="downloadManagePDF()">downloadPDF</button>
</div>
  downloadManagePDF(){
const docDefinition = {
  content: [
    { text: 'Doctor Details', style: 'header' },
    { text: '\n' },
    { text: `Name: ${this.doctor.name}`,style: 'header' },
    { text: '\n' },
    { text: `Specialization: ${this.doctor.specialization}`,style: 'header' },
    { text: '\n' },
    { text: `Clinic: ${this.doctor.clinic}`,style: 'header' },
    { text: '\n' },
    { text: `Address: ${this.doctor.address}`,style: 'header' },
    { text: '\n' },
    { text: `Phone: ${this.doctor.phone}`,style: 'header' },
    { text: '\n' },
    { text: `Email: ${this.doctor.email}`,style: 'header' }
  ],
  styles: {
    header: {
      fontSize: 18,
      bold: true
    }
  }
};

pdfMake.createPdf(docDefinition).download("doctorDetails");


}
 doctor = {
  name: 'Dr. John Doe',
  specialization: 'Cardiologist',
  clinic: 'CardioCare Clinic',
  address: '123 Main Street, City',
  phone: '+1 123-456-7890',
  email: 'drjohndoe@example.com'
};
  ];
  
  import { NgxQRCodeModule } from '@techiediaries/ngx-qrcode';
  import { NgxChartsModule } from '@swimlane/ngx-charts';
  
   "@angular/animations": "^14.2.0",
    "@angular/cdk": "^13.0.0",
    "@angular/common": "^14.2.0",
    "@angular/compiler": "^14.2.0",
    "@angular/core": "^14.2.0",
    "@angular/forms": "^14.2.0",
    "@angular/platform-browser": "^14.2.0",
    "@angular/platform-browser-dynamic": "^14.2.0",
    "@angular/router": "^14.2.0",
    "@swimlane/ngx-charts": "^20.1.2",
    "@techiediaries/ngx-qrcode": "^9.1.0",
    "google-auth-library": "^8.8.0",
    "googleapis": "^118.0.0",
    "ng-gapi": "0.0.94",
    "ngx-qrcode2": "^9.0.0",
    "rxjs": "~7.5.0",
    "tslib": "^2.3.0",
    "zone.js": "~0.11.4"
<ngx-qrcode [value]="value"></ngx-qrcode>
  value="7038396335@ybl"
